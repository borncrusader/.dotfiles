#!/bin/sh
#################################################
# This is the main rc file where everything is
#################################################

_sp=${_sp}_mr

#################################################
# Aliases
#################################################
# common
alias chkconn='ping 8.8.8.8'
alias dush=' du -sh'
alias leaky='valgrind --leak-check=full --track-origins=yes'
alias ll=' ls -lh'
alias makit='make 2>&1 | tee grep_op'
alias pore='vi -X -c "cf grep_op" -c "copen"'
alias rdesk='rdesktop -g 1366x730'
alias ta='tmux att -d -t '
alias tl='tmux list-sessions'
alias tn='tmux new -s'
alias vi='vim -X'
alias gotb="go test -bench ."

[ -f /usr/local/bin/ctags ] && alias ctags='/usr/local/bin/ctags'
[ -f /usr/bin/sed ] && alias sed='/usr/bin/sed'

# shellcheck disable=SC2139
[ -f "$HOME/Dropbox/docs/sesame.yaml" ] && \
    alias visesame="vi $HOME/Dropbox/docs/sesame.yaml"

# shellcheck disable=SC2139
[ -d "$CODE" ] && alias cdc="cd $CODE"
# shellcheck disable=SC2139
[ -d "$GOPATH" ] && alias cdg="cd $GOPATH"

# os specific
if [ "$OS" = 'MAC' ]; then
	alias ls=' ls -GFh'
    alias wumount="sudo umount -f /Volumes/work"
    alias vim="/usr/local/bin/vim"
else
	alias ls=' ls -F --color'
    alias open="xdg-open"
    alias boot_to_windows="sudo grub-reboot 'Microsoft Windows 10' && sudo reboot"
fi

#################################################
# Functions
#################################################
mount_all()
{
    if [ "$OS" = 'MAC' ]; then
        if [ -f "$HOME/code/code.dmg.sparseimage" ]; then
            sudo hdiutil attach "$HOME/code/code.dmg.sparseimage" \
                -mountpoint "$CODE"
        fi
        if [ -f "$HOME/code/personal.dmg.sparseimage" ]; then
            sudo hdiutil attach "$HOME/code/personal.dmg.sparseimage" \
                -mountpoint "/Volumes/personal"
        fi
        if [ -f "$HOME/code/work.dmg.sparseimage" ]; then
            sudo hdiutil attach "$HOME/code/work.dmg.sparseimage" \
                -mountpoint "/Volumes/work"
        fi
    fi
}

umount_all()
{
    sudo umount -f /Volumes/code
    sudo umount -f /Volumes/personal
    sudo umount -f /Volumes/work
}

mkcd()
{
    if [ ! -d "$1" ]; then
        mkdir -p "$1"
    fi

    cd "$1" || return
}

xrpm()
{
    rpm2cpio "$1" | cpio -idmv
}

grayscale()
{
    gs \
        -sOutputFile="$2" \
        -sDEVICE=pdfwrite \
        -sColorConversionStrategy=Gray \
        -dProcessColorModel=/DeviceGray \
        -dCompatibilityLevel=1.4 \
        -dNOPAUSE \
        -dBATCH \
        "$1"
}

dboxsanity()
{
    find "$HOME/Dropbox/" -name '*conflicted*'
    find "$HOME/Dropbox/" -name '.*.swp'
    find "$HOME/Dropbox/sysdump" -type f -not -name '*.md'
}

refresh()
{
    if [ "$OS" = "LINUX" ]; then
        sudo pacman -Syyu
        yay -Syyu

        if [ -n "$1" ] && [ "$1" = "all" ]; then
            sudo pacman -S linux-lts linux-lts-docs linux-lts-headers \
                linux-zen linux-zen-docs linux-zen-headers nvidia-lts
        fi
    fi
}

shdbg()
{
    echo "$_sp"
}

#################################################
# SSH/GPG Agent Handling
#################################################
start_ssh_agent()
{
    if pgrep ssh-agent > /dev/null;  then
        return
    fi

    if [ -S "$SSH_AUTH_SOCK" ]; then
        echo "removing stale socket: $SSH_AUTH_SOCK"
        rm "$SSH_AUTH_SOCK"
    fi

    # if socket is available create the new auth session
    if [ ! -S "$SSH_AUTH_SOCK" ]; then
        echo "starting ssh-agent"
        ssh-agent -a "$SSH_AUTH_SOCK" > /dev/null 2>&1

        # Add all default keys to ssh auth
        ssh-add 2> /dev/null
    fi
}

start_gpg_agent()
{
    if pgrep gpg-agent > /dev/null; then
        return
    fi

    if [ -f /usr/local/bin/pinentry ]; then
        gpg-agent --daemon --pinentry-program /usr/local/bin/pinentry
    else
        gpg-agent --daemon
    fi
}

plex()
{
    if [ "$OS" = 'LINUX' ]; then
        if [ "$1" = "stop" ]; then
            echo "stopping plex"
            sudo systemctl stop plexmediaserver.service
            return
        fi

        echo "starting plex"
        sudo systemctl start plexmediaserver.service
        xdg-open http://localhost:32400/web &
    else
        echo "not implemented!"
    fi
}

_source_if_exists "$HOME/.myshrc_work"

# this is hacky, but oh-my-zsh sets LSCOLORS to a funky stupid color on Mac,
# restore it back here
if [ "$OS" = 'MAC' ]; then
    export LSCOLORS=exfxcxdxbxegedabagacad
fi

_sp=${_sp}_MR

echo 'Howdy Srinath'
