#!/bin/sh
#################################################
# This is the main rc file where everything is
#################################################

_sp=${_sp}_mr

#################################################
# Aliases
#################################################
# common
if type bat > /dev/null 2>&1; then
    alias cat="bat"
elif type batcat > /dev/null 2>&1; then
    alias cat="batcat"
else
    unalias cat
fi
alias chkconn='ping 8.8.8.8'
alias dush=' du -sh'
alias gotb="go test -bench ."
alias leaky='valgrind --leak-check=full --track-origins=yes'
alias ll=' ls -lh'
alias makit='make 2>&1 | tee grep_op'
alias vc="nvim ~/.config/nvim/init.lua"
alias lnvim="NVIM_APPNAME=nvim-lazy nvim"
alias pore='vi -X -c "cf grep_op" -c "copen"'
alias prettypath="echo $PATH | sed 's/:/\n/g'"
alias rdesk='rdesktop -g 1366x730'
alias ta='tmux att -d -t '
alias tl='tmux list-sessions'
alias tn='tmux new -s'
alias vi='nvim -X'

[ -f "$HOME/.claude/local/claude" ] && alias claude="$HOME/.claude/local/claude"

[ -f /usr/local/bin/ctags ] && alias ctags='/usr/local/bin/ctags'
[ -f /usr/bin/sed ] && alias sed='/usr/bin/sed'

# shellcheck disable=SC2139
[ -f "$HOME/Dropbox/docs/sesame.yaml" ] && \
    alias visesame="vi $HOME/Dropbox/docs/sesame.yaml"

alias cdc='cd $CODE'
alias cdl='cd $CODE/learn'
alias cdg='cd $GOPATH'
alias cdmygo='cd $GOPATH/src/github.com/borncrusader'

# os specific
if [ "$OS" = 'MAC' ]; then
    if ! type eza > /dev/null 2>&1; then
        alias ls='ls -GFh'
    else
        alias ls='eza -F --color auto'
    fi

    if [ -f "/opt/homebrew/bin/nvim" ]; then
        alias vim="/opt/homebrew/bin/nvim"
    elif command -v nvim; then
        # shellcheck disable=SC2139
        alias vim="$(command -v nvim)"
    elif [ -f "/opt/homebrew/bin/vim" ]; then
        alias vim="/opt/homebrew/bin/vim"
    elif [ -f "/usr/bin/vim" ]; then
        alias vim="/usr/bin/vim"
    elif [ -f "/usr/local/bin/vim" ]; then
        alias vim="/usr/local/bin/vim"
    fi
else
    if command -v nvim 1>/dev/null; then
        # shellcheck disable=SC2139
        alias vim="$(command -v nvim)"
    fi

    if ! type eza > /dev/null 2>&1; then
        alias ls='ls -F --color'
    else
        alias ls='eza -F --color auto'
    fi

    alias open="xdg-open"
    alias boot_to_windows="sudo grub-reboot 'Microsoft Windows 10' && sudo reboot"
fi

#################################################
# Functions
#################################################
mount_all()
{
    if [ "$OS" = 'MAC' ]; then
        if [ -f "$HOME/code/code.dmg.sparseimage" ]; then
            sudo hdiutil attach "$HOME/code/code.dmg.sparseimage" \
                -mountpoint "$CODE"
        fi
    fi
}

umount_all()
{
    sudo umount -f /Volumes/code
}

mkcd()
{
    if [ ! -d "$1" ]; then
        mkdir -p "$1"
    fi

    cd "$1" || return
}

xrpm()
{
    rpm2cpio "$1" | cpio -idmv
}

grayscale()
{
    gs \
        -sOutputFile="$2" \
        -sDEVICE=pdfwrite \
        -sColorConversionStrategy=Gray \
        -dProcessColorModel=/DeviceGray \
        -dCompatibilityLevel=1.4 \
        -dNOPAUSE \
        -dBATCH \
        "$1"
}

refresh()
{
    usage() {
        echo "$0 {options}"
        echo "  without options, would attempt to update all installed packages"
        echo "  -h  : print this help"
        echo "  -k  : update keyring and refresh keys"
        echo "  -a  : update excluded packages also"
        echo "  -o  : get orphans"
        echo "  -or : remove orphans [use caution]"
        echo "  -c  : get cache free"
        echo "  -cr : empty cache (including aur)"
        echo "  -g  : graph of all packages; provide file name as argument"
    }

    if [ "$OS" = "LINUX" ]; then
        if [ -n "$1" ] && [ "$1" = "-h" ]; then
            usage
            return
        fi

        case "$1" in
            "-o")
                pacman -Qtdq
                ;;
            "-or")
                pacman -Qtdq | xargs pacman -Rns
                ;;
            "-c")
                paccache -d -v
                ;;
            "-cr")
                paccache -r
                ;;
            "-g")
                if [ -z "$2" ]; then
                    echo "provide file name"
                    return
                fi
                pacgraph -s -f "$2"
                ;;
            "-k")
                sudo pacman -S archlinux-keyring
                sudo pacman-key --refresh-keys
                sudo pacman -Syu
                ;;
            "-m")
                # 2025-07-26: removed linux-zen, linux-zen-docs, linux-zen-headers
                #             and nvidia-dkms, nvidia-utils
                sudo pacman --needed --noconfirm -S \
                    linux-lts linux-lts-docs linux-lts-headers \
                    v4l2loopback-dkms \
                    virtualbox-guest-utils virtualbox-host-dkms \
                    zfs-utils zfs-dkms
                yay --needed -S wireguard-dkms zenpower-dkms
                ;;
            "-a" | "")
                sudo pacman -Syyu
                yay -Sua

                if [ -n "$1" ] && [ "$1" = "-a" ]; then
                    refresh -m
                fi
                ;;
            *)
                usage
                ;;
        esac
    fi
}

shdbg()
{
    echo "$_sp"
}

ws()
{
    if [ "$1" = 'work' ] || [ "$1" = 'w' ]; then
        export GOPATH="$GOPATH_WORK"
        export GOBIN="$GOPATH/bin"
        _add_to_path "$GOBIN"
    else
        export GOPATH="$GOPATH_DEFAULT"
        export GOBIN="$GOPATH/bin"
        _add_to_path "$GOBIN"
    fi

    echo "GOPATH => $GOPATH"
    echo "GOBIN => $GOBIN"
}

#################################################
# SSH/GPG Agent Handling
#################################################
start_ssh_agent()
{
    if pgrep ssh-agent > /dev/null;  then
        return
    fi

    if [ -S "$SSH_AUTH_SOCK" ]; then
        echo "removing stale socket: $SSH_AUTH_SOCK"
        rm "$SSH_AUTH_SOCK"
    fi

    # if socket is available create the new auth session
    if [ ! -S "$SSH_AUTH_SOCK" ]; then
        ssh-agent -a "$SSH_AUTH_SOCK" > /dev/null 2>&1
    fi
}

add_ssh()
{
    # shellcheck disable=SC2086
    ssh-add $HOME/.ssh/*id_rsa
}

start_gpg_agent()
{
    if pgrep gpg-agent > /dev/null; then
        return
    fi

    if [ -f /usr/local/bin/pinentry ]; then
        gpg-agent --daemon --pinentry-program /usr/local/bin/pinentry
    else
        gpg-agent --daemon
    fi
}

plex()
{
    if [ "$OS" = 'LINUX' ]; then
        if [ "$1" = "stop" ]; then
            echo "stopping plex"
            sudo systemctl stop plexmediaserver.service
            return
        fi

        echo "starting plex"
        sudo systemctl start plexmediaserver.service
        echo "you can access the console via http://localhost:32400/web"
    else
        echo "not implemented!"
    fi
}

inspect_cert()
{
    if [ "$1" = "-h" ]; then
        echo "multiple usages:"
        echo "  $0 -f {filename}                    - inspect a cert in file"
        echo "  $0 -sni {servername} {host} [port]  - inspect a cert in host; providing an SNI header; default port is 443"
        echo "  $0 -nosni {host} [port]             - inspect a cert in host; no sni header is sent; default port is 443"
        echo "  $0 {host} [port]                    - inspect a cert in host; default port is 443"
        return
    elif [ "$1" = "-f" ]; then
        file=$2
        shift 2
    elif [ "$1" = "-sni" ]; then
        shift 1
        servername=$1
        shift 1
    elif [ "$1" = "-nosni" ];then
        nosni=TRUE
        shift 1
    fi

    if [ -n "$file" ]; then
        openssl x509 -in "$file" -text -noout
    else
        host=$1
        if [ -n "$2" ]; then
            port=$2
        else
            port=443
        fi

        if [ -n "$nosni" ]; then
        echo | \
            openssl s_client -showcerts -connect "$host:$port" 2>/dev/null | \
            openssl x509 -inform pem -noout -text
        elif [ -n "$servername" ]; then
        echo | \
            openssl s_client -showcerts -servername "$servername" -connect "$host:$port" 2>/dev/null | \
            openssl x509 -inform pem -noout -text
        else
        echo | \
            openssl s_client -showcerts -servername "$host" -connect "$host:$port" 2>/dev/null | \
            openssl x509 -inform pem -noout -text
        fi
    fi
}

inspect_cert_issuer()
{
    inspect_cert "$1" "$2" | grep -A5 'Issuer:'
}

_source_if_exists "$HOME/.myshrc_work"

if [ "$OS" = 'MAC' ]; then
    # this is hacky, but oh-my-zsh sets LSCOLORS to a funky stupid color on Mac,
    # restore it back here
    export LSCOLORS=exfxcxdxbxegedabagacad
elif [ "$OS" = 'LINUX' ]; then
    start_ssh_agent

    if [ -d "/opt/rocm" ]; then
        export ROCM_PATH=/opt/rocm
        export HIP_PATH=/opt/rocm
        export LD_LIBRARY_PATH=/opt/rocm/lib:$LD_LIBRARY_PATH
        export PATH=/opt/rocm/bin:$PATH

        # ROCm-specific settings for Ollama
        export HSA_OVERRIDE_GFX_VERSION=11.0.0
        export GPU_MAX_HEAP_SIZE=100
        export GPU_MAX_ALLOC_PERCENT=100
    fi
fi

_source_if_exists /opt/homebrew/opt/asdf/libexec/asdf.sh

_sp=${_sp}_MR

echo '~ Keep calm and ðŸ§˜ ~'
