#!/bin/sh
#################################################
# This is the main rc file where everything is
#################################################

_sp=${_sp}_mr

#################################################
# Aliases
#################################################
# common
alias chkconn='ping 8.8.8.8'
alias dush=' du -sh'
alias leaky='valgrind --leak-check=full --track-origins=yes'
alias ll=' ls -lh'
alias makit='make 2>&1 | tee grep_op'
alias pore='vi -X -c "cf grep_op" -c "copen"'
alias rdesk='rdesktop -g 1366x730'
alias ta='tmux att -d -t '
alias tl='tmux list-sessions'
alias tn='tmux new -s'
alias vi='vim -X'
alias gotb="go test -bench ."

[ -f /usr/local/bin/ctags ] && alias ctags='/usr/local/bin/ctags'
[ -f /usr/bin/sed ] && alias sed='/usr/bin/sed'

# shellcheck disable=SC2139
[ -f "$HOME/Dropbox/docs/sesame.yaml" ] && \
    alias visesame="vi $HOME/Dropbox/docs/sesame.yaml"

alias cdc='cd $CODE'
alias cdg='cd $GOPATH'

# os specific
if [ "$OS" = 'MAC' ]; then
	alias ls=' ls -GFh'
    alias wumount="sudo umount -f /Volumes/Salesforce"
    alias vim="/usr/local/bin/vim"
else
	alias ls=' ls -F --color'
    alias open="xdg-open"
    alias boot_to_windows="sudo grub-reboot 'Microsoft Windows 10' && sudo reboot"
fi

#################################################
# Functions
#################################################
mount_all()
{
    if [ "$OS" = 'MAC' ]; then
        if [ -f "$HOME/code/code.dmg.sparseimage" ]; then
            sudo hdiutil attach "$HOME/code/code.dmg.sparseimage" \
                -mountpoint "$CODE"
        fi
        if [ -f "$HOME/code/personal.dmg.sparseimage" ]; then
            sudo hdiutil attach "$HOME/code/personal.dmg.sparseimage" \
                -mountpoint "/Volumes/personal"
        fi
        if [ -f "$HOME/code/work.dmg.sparseimage" ]; then
            sudo hdiutil attach "$HOME/code/work.dmg.sparseimage" \
                -mountpoint "/Volumes/work"
        fi
    fi
}

umount_all()
{
    sudo umount -f /Volumes/code
    sudo umount -f /Volumes/personal
    sudo umount -f /Volumes/Salesforce
}

mkcd()
{
    if [ ! -d "$1" ]; then
        mkdir -p "$1"
    fi

    cd "$1" || return
}

xrpm()
{
    rpm2cpio "$1" | cpio -idmv
}

grayscale()
{
    gs \
        -sOutputFile="$2" \
        -sDEVICE=pdfwrite \
        -sColorConversionStrategy=Gray \
        -dProcessColorModel=/DeviceGray \
        -dCompatibilityLevel=1.4 \
        -dNOPAUSE \
        -dBATCH \
        "$1"
}

dboxsanity()
{
    find "$HOME/Dropbox/" -name '*conflicted*'
    find "$HOME/Dropbox/" -name '.*.swp'
    find "$HOME/Dropbox/sysdump" -type f -not -name '*.md'
}

refresh()
{
    usage() {
        echo "$0 {options}"
        echo "  without options, would attempt to update all installed packages"
        echo "  -h  : print this help"
        echo "  -a  : update excluded packages also"
        echo "  -o  : get orphans"
        echo "  -or : remove orphans [use caution]"
        echo "  -c  : get cache free"
        echo "  -cr : empty cache (including aur)"
        echo "  -g  : graph of all packages; provide file name as argument"
    }

    if [ "$OS" = "LINUX" ]; then
        if [ -n "$1" ] && [ "$1" = "-h" ]; then
            usage
            return
        fi

        case "$1" in
            "-o")
                pacman -Qtdq
                ;;
            "-or")
                pacman -Qtdq | xargs pacman -Rns
                ;;
            "-c")
                paccache -d -v
                ;;
            "-cr")
                paccache -r
                ;;
            "-g")
                if [ -z "$2" ]; then
                    echo "provide file name"
                    return
                fi
                pacgraph -s -f "$2"
                ;;
            "")
                sudo pacman -Syyu
                yay -Sua

                if [ -n "$1" ] && [ "$1" = "-a" ]; then
                    sudo pacman --noconfirm -S linux-lts linux-lts-headers \
                        linux-lts-docs nvidia-lts linux-zen linux-zen-docs \
                        linux-zen-headers nvidia-dkms v4l2loopback-dkms \
                        virtualbox-guest-dkms virtualbox-host-dkms \
                        wireguard-dkms zfs-utils zfs-dkms nvidia-utils
                    yay -S zenpower-dkms
                fi
                ;;
            *)
                usage
                ;;
        esac
    fi
}

shdbg()
{
    echo "$_sp"
}

ws()
{
    if [ "$1" = 'work' ] || [ "$1" = 'w' ]; then
        export GOPATH=$GOPATH_WORK
        export GOBIN=$GOPATH/bin
        _add_to_path "$GOBIN"
    else
        export GOPATH=$GOPATH_DEFAULT
        export GOBIN=$GOPATH/bin
        _add_to_path "$GOBIN"
    fi

    echo "GOPATH => $GOPATH"
    echo "GOBIN => $GOBIN"
}

#################################################
# SSH/GPG Agent Handling
#################################################
start_ssh_agent()
{
    if pgrep ssh-agent > /dev/null;  then
        return
    fi

    if [ -S "$SSH_AUTH_SOCK" ]; then
        echo "removing stale socket: $SSH_AUTH_SOCK"
        rm "$SSH_AUTH_SOCK"
    fi

    # if socket is available create the new auth session
    if [ ! -S "$SSH_AUTH_SOCK" ]; then
        ssh-agent -a "$SSH_AUTH_SOCK" > /dev/null 2>&1
    fi
}

add_ssh()
{
    # shellcheck disable=SC2086
    ssh-add $HOME/.ssh/*id_rsa
}

start_gpg_agent()
{
    if pgrep gpg-agent > /dev/null; then
        return
    fi

    if [ -f /usr/local/bin/pinentry ]; then
        gpg-agent --daemon --pinentry-program /usr/local/bin/pinentry
    else
        gpg-agent --daemon
    fi
}

plex()
{
    if [ "$OS" = 'LINUX' ]; then
        if [ "$1" = "stop" ]; then
            echo "stopping plex"
            sudo systemctl stop plexmediaserver.service
            return
        fi

        echo "starting plex"
        sudo systemctl start plexmediaserver.service
        echo "you can access the console via http://localhost:32400/web"
    else
        echo "not implemented!"
    fi
}

inspect_cert()
{
    if [ "$1" = "-f" ]; then
        file=$2
        shift 2
    elif [ "$1" = "-nosni" ];then
        nosni=TRUE
        shift 1
    fi

    host=$1
    if [ -n "$2" ]; then
        port=$2
    else
        port=443
    fi

    if [ -n "$file" ]; then
        openssl x509 -in "$file" -text -noout
    else
        if [ -n "$nosni" ]; then
        echo | \
            openssl s_client -showcerts -connect "$host:$port" 2>/dev/null | \
            openssl x509 -inform pem -noout -text
        else
        echo | \
            openssl s_client -showcerts -servername "$host" -connect "$host:$port" 2>/dev/null | \
            openssl x509 -inform pem -noout -text
        fi
    fi
}

inspect_cert_issuer()
{
    inspect_cert "$1" "$2" | grep -A5 'Issuer:'
}

_source_if_exists "$HOME/.myshrc_work"

if [ "$OS" = 'MAC' ]; then
    # this is hacky, but oh-my-zsh sets LSCOLORS to a funky stupid color on Mac,
    # restore it back here
    export LSCOLORS=exfxcxdxbxegedabagacad
elif [ "$OS" = 'LINUX' ]; then
    start_ssh_agent
fi

_sp=${_sp}_MR

echo '~ Keep calm and ðŸ§˜ ~'
