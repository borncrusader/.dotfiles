#+TITLE: Emacs Configuration
#+AUTHOR: Srinath Krishna Ananthakrishnan
#+EMAIL: srinath.krishna@gmail.com
#+OPTIONS: toc:nil num:nil

* Configure =use-package=
#+begin_src emacs-lisp
  (use-package auto-compile
    :config (auto-compile-on-load-mode))

  (setq load-prefer-newer t)
#+end_src

* General Configuration
** UX Enhancements

The default frame title isn't useful. This binds it to the name of the current project:

#+begin_src emacs-lisp
  ;;(setq frame-title-format '((:eval (projectile-project-name))))
#+end_src

* Programming
** Common
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap ("C-c p" . projectile-command-map)
    :init
    (setq projectile-project-search-path '())
    (when (file-directory-p "/Volumes/Salesforce/salesforce")
      (add-to-list 'projectile-project-search-path "/Volumes/Salesforce/salesforce"))
    (when (file-directory-p "/Volumes/Salesforce/heroku")
      (add-to-list 'projectile-project-search-path "/Volumes/Salesforce/heroku"))
    (when (file-directory-p "/Volumes/personal")
      (add-to-list 'projectile-project-search-path "/Volumes/personal"))
    (when (file-directory-p "/Volumes/Salesforce/heroku/go-workspace/src/github.com/borncrusader")
      (add-to-list 'projectile-project-search-path "/Volumes/Salesforce/heroku/go-workspace/src/github.com/borncrusader"))
    (when (file-directory-p "/Volumes/Salesforce/heroku/go-workspace/src/github.com/heroku")
      (add-to-list 'projectile-project-search-path "/Volumes/Salesforce/heroku/go-workspace/src/github.com/heroku"))
    (setq projectile-switch-project-action 'projectile-dired))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package magit)
#+end_src
** Golang

Emacs has a default tab-width of 8 spaces. Go doesn't like that.

#+begin_src emacs-lisp
  ;;(use-package go-mode)
  ;;(setq GOPATH "/Volumes/salesforce/heroku/go-workspace/")
#+end_src

Flycheck helps run checkers in the background for syntax errors.

#+begin_src emacs-lisp
  ;;(use-package flycheck
  ;;  :ensure t
  ;;  :init (global-flycheck-mode))
#+end_src

LSP mode is really helpful for writing code with go.

#+begin_src emacs-lisp
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  ;;(setq lsp-keymap-prefix "C-c l")

  ;;(use-package lsp-mode
  ;;  :config
  ;;  (add-hook 'c++-mode-hook 'lsp)
  ;;  (add-hook 'python-mode-hook 'lsp)
  ;;  (add-hook 'go-mode 'lsp)
  ;;  :commands lsp)
#+end_src

#+begin_src emacs-lisp
  (use-package go-projectile
    :ensure t)
#+end_src

#+begin_src emacs-lisp
;;Smaller compilation buffer
;;(setq compilation-window-height 14)
;;(defun my-compilation-hook ()
;;  (when (not (get-buffer-window "*compilation*"))
;;    (save-selected-window
;;      (save-excursion
;;        (let* ((w (split-window-vertically))
;;               (h (window-height w)))
;;          (select-window w)
;;          (switch-to-buffer "*compilation*")
;;          (shrink-window (- h compilation-window-height)))))))
;;(add-hook 'compilation-mode-hook 'my-compilation-hook)
#+end_src

#+begin_src emacs-lisp
  ;;(use-package gotest
  ;;  :ensure t)
  ;;(use-package company
  ;;  :ensure t)
  ;;(use-package company-go
  ;;  :ensure t)
; pkg go installation
;;(setq exec-path (append '("/usr/local/go/bin") exec-path))
;;(setenv "PATH" (concat "/usr/local/go/bin:" (getenv "PATH")))
;;
;;(defun my-go-mode-hook ()
;;      (setq tab-width 4 indent-tabs-mode 1)
;;      ; eldoc shows the signature of the function at point in the status bar.
;;      (go-eldoc-setup)
;;      (local-set-key (kbd "M-.") #'godef-jump)
;;      (add-hook 'before-save-hook 'gofmt-before-save)
;;
;;      ; extra keybindings from https://github.com/bbatsov/prelude/blob/master/modules/prelude-go.el
;;      (let ((map go-mode-map))
;;        (define-key map (kbd "C-c a") 'go-test-current-project) ;; current package, really
;;        (define-key map (kbd "C-c m") 'go-test-current-file)
;;        (define-key map (kbd "C-c .") 'go-test-current-test)
;;        (define-key map (kbd "C-c b") 'go-run)))
;;(add-hook 'go-mode-hook 'my-go-mode-hook)
;;
;;; Use projectile-test-project in place of 'compile'; assign whatever key you want.
;;(global-set-key [f9] 'projectile-test-project)
;;
;;; "projectile" recognizes git repos (etc) as "projects" and changes settings
;;; as you switch between them. 
;;(projectile-global-mode 1)
;;(go-projectile-tools-add-path)
;;(setq gofmt-command (concat go-projectile-tools-path "/bin/goimports"))
;;
;;;;; "company" is auto-completion
;;;;(add-hook 'go-mode-hook (lambda ()
;;;;                          (company-mode)
;;;;                          (set (make-local-variable 'company-backends) '(company-go))))
;;;;(add-hook 'after-init-hook 'global-company-mode)
;;
;;; gotest defines a better set of error regexps for go tests, but it only
;;; enables them when using its own functions. Add them globally for use in
;;(use-package compile
;;  :ensure t)
;;(use-package gotest
;;  :ensure t)
;;(dolist (elt go-test-compilation-error-regexp-alist-alist)
;;  (add-to-list 'compilation-error-regexp-alist-alist elt))
;;(defun prepend-go-compilation-regexps ()
;;  (dolist (elt (reverse go-test-compilation-error-regexp-alist))
;;    (add-to-list 'compilation-error-regexp-alist elt t)))
;;(add-hook 'go-mode-hook 'prepend-go-compilation-regexps)
;;
;;;; do M-x go-projectile-install-tools
;;
;;; end .emacs additions
#+end_src

Run =gofmt= on save.

#+begin_src emacs-lisp
;;  (add-hook 'before-save-hook 'gofmt-before-save)
#+end_src
